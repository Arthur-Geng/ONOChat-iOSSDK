// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Protocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProtocolRoot

@implementation ProtocolRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ProtocolRoot_FileDescriptor

static GPBFileDescriptor *ProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UserData

@implementation UserData

@dynamic uid;
@dynamic name;
@dynamic icon;
@dynamic sign;
@dynamic email;
@dynamic birth;
@dynamic mobile;
@dynamic gender;
@dynamic ex;

typedef struct UserData__storage_ {
  uint32_t _has_storage_[1];
  int32_t gender;
  NSString *uid;
  NSString *name;
  NSString *icon;
  NSString *sign;
  NSString *email;
  NSString *birth;
  NSString *mobile;
  NSString *ex;
} UserData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserData__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserData__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserData__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Sign,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserData__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Email,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserData__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birth",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Birth,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserData__storage_, birth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Mobile,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserData__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Gender,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserData__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ex",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Ex,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UserData__storage_, ex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserData class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic mid;
@dynamic type;
@dynamic from;
@dynamic to;
@dynamic data_p;
@dynamic time;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *mid;
  NSString *from;
  NSString *to;
  NSString *data_p;
  double time;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_To,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Message__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Message__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Message__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ErrorResponse

@implementation ErrorResponse

@dynamic code;
@dynamic message;
@dynamic extra;

typedef struct ErrorResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
  NSString *extra;
} ErrorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ErrorResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ErrorResponse__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = ErrorResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ErrorResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extra",
        .dataTypeSpecific.className = NULL,
        .number = ErrorResponse_FieldNumber_Extra,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ErrorResponse__storage_, extra),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrorResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ErrorResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserKick

@implementation UserKick

@dynamic content;

typedef struct UserKick__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
} UserKick__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = UserKick_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserKick__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserKick class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserKick__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserLoginRequest

@implementation UserLoginRequest

@dynamic token;

typedef struct UserLoginRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} UserLoginRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = UserLoginRequest_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserLoginRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserLoginRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserLoginRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserLoginResponse

@implementation UserLoginResponse

@dynamic hasUser, user;
@dynamic messagesArray, messagesArray_Count;

typedef struct UserLoginResponse__storage_ {
  uint32_t _has_storage_[1];
  UserData *user;
  NSMutableArray *messagesArray;
} UserLoginResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = UserLoginResponse_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserLoginResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = UserLoginResponse_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserLoginResponse__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserLoginResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserLoginResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfileRequest

@implementation UserProfileRequest

@dynamic uid;

typedef struct UserProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} UserProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = UserProfileRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserProfileRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfileRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfileResponse

@implementation UserProfileResponse

@dynamic hasUser, user;

typedef struct UserProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  UserData *user;
} UserProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = UserProfileResponse_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserProfileResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfileResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReadMessageRequest

@implementation ReadMessageRequest

@dynamic mid;

typedef struct ReadMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *mid;
} ReadMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = ReadMessageRequest_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReadMessageRequest__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReadMessageRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReadMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageRequest

@implementation SendMessageRequest

@dynamic type;
@dynamic to;
@dynamic data_p;
@dynamic mid;

typedef struct SendMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *to;
  NSString *data_p;
  NSString *mid;
} SendMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Mid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessagenResponse

@implementation SendMessagenResponse

@dynamic omid;
@dynamic nmid;

typedef struct SendMessagenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *omid;
  NSString *nmid;
} SendMessagenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "omid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessagenResponse_FieldNumber_Omid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessagenResponse__storage_, omid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nmid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessagenResponse_FieldNumber_Nmid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessagenResponse__storage_, nmid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessagenResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessagenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
