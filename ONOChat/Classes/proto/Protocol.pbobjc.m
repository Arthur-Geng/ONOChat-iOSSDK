// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Protocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProtocolRoot

@implementation ProtocolRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ProtocolRoot_FileDescriptor

static GPBFileDescriptor *ProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UserData

@implementation UserData

@dynamic uid;
@dynamic name;
@dynamic avatar;
@dynamic gender;
@dynamic ex;

typedef struct UserData__storage_ {
  uint32_t _has_storage_[1];
  int32_t gender;
  NSString *uid;
  NSString *name;
  NSString *avatar;
  NSString *ex;
} UserData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserData__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserData__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserData__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Gender,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserData__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ex",
        .dataTypeSpecific.className = NULL,
        .number = UserData_FieldNumber_Ex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserData__storage_, ex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserData class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic mid;
@dynamic type;
@dynamic from;
@dynamic to;
@dynamic data_p;
@dynamic time;
@dynamic hasUser, user;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *mid;
  NSString *from;
  NSString *to;
  NSString *data_p;
  UserData *user;
  double time;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_To,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Message__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Message__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Message__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = Message_FieldNumber_User,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Message__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Friend

@implementation Friend

@dynamic uid;
@dynamic remark;

typedef struct Friend__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *remark;
} Friend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = Friend_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Friend__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = Friend_FieldNumber_Remark,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Friend__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Friend class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Friend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ErrorResponse

@implementation ErrorResponse

@dynamic code;
@dynamic message;
@dynamic extra;

typedef struct ErrorResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
  NSString *extra;
} ErrorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ErrorResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ErrorResponse__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = ErrorResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ErrorResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extra",
        .dataTypeSpecific.className = NULL,
        .number = ErrorResponse_FieldNumber_Extra,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ErrorResponse__storage_, extra),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrorResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ErrorResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserKick

@implementation UserKick

@dynamic content;

typedef struct UserKick__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
} UserKick__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = UserKick_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserKick__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserKick class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserKick__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewFriend

@implementation NewFriend

@dynamic hasUser, user;
@dynamic friendSyncTag;

typedef struct NewFriend__storage_ {
  uint32_t _has_storage_[1];
  UserData *user;
  int64_t friendSyncTag;
} NewFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = NewFriend_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewFriend__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendSyncTag",
        .dataTypeSpecific.className = NULL,
        .number = NewFriend_FieldNumber_FriendSyncTag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewFriend__storage_, friendSyncTag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewFriend class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewFriendRequest

@implementation NewFriendRequest

@dynamic hasUser, user;
@dynamic greeting;

typedef struct NewFriendRequest__storage_ {
  uint32_t _has_storage_[1];
  UserData *user;
  NSString *greeting;
} NewFriendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = NewFriendRequest_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewFriendRequest__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = NewFriendRequest_FieldNumber_Greeting,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewFriendRequest__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewFriendRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewFriendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendOperations

@implementation FriendOperations

@dynamic addsArray, addsArray_Count;
@dynamic updatesArray, updatesArray_Count;
@dynamic deletesArray, deletesArray_Count;
@dynamic friendSyncTag;

typedef struct FriendOperations__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addsArray;
  NSMutableArray *updatesArray;
  NSMutableArray *deletesArray;
  int64_t friendSyncTag;
} FriendOperations__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = FriendOperations_FieldNumber_AddsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FriendOperations__storage_, addsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = FriendOperations_FieldNumber_UpdatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FriendOperations__storage_, updatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletesArray",
        .dataTypeSpecific.className = NULL,
        .number = FriendOperations_FieldNumber_DeletesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FriendOperations__storage_, deletesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendSyncTag",
        .dataTypeSpecific.className = NULL,
        .number = FriendOperations_FieldNumber_FriendSyncTag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendOperations__storage_, friendSyncTag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendOperations class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendOperations__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserLoginRequest

@implementation UserLoginRequest

@dynamic token;

typedef struct UserLoginRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} UserLoginRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = UserLoginRequest_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserLoginRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserLoginRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserLoginRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserLoginResponse

@implementation UserLoginResponse

@dynamic hasUser, user;

typedef struct UserLoginResponse__storage_ {
  uint32_t _has_storage_[1];
  UserData *user;
} UserLoginResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = UserLoginResponse_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserLoginResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserLoginResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserLoginResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfileRequest

@implementation UserProfileRequest

@dynamic uid;

typedef struct UserProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} UserProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = UserProfileRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserProfileRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfileRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfileResponse

@implementation UserProfileResponse

@dynamic hasUser, user;

typedef struct UserProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  UserData *user;
} UserProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = UserProfileResponse_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserProfileResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfileResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfilesRequest

@implementation UserProfilesRequest

@dynamic uidsArray, uidsArray_Count;

typedef struct UserProfilesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *uidsArray;
} UserProfilesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uidsArray",
        .dataTypeSpecific.className = NULL,
        .number = UserProfilesRequest_FieldNumber_UidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserProfilesRequest__storage_, uidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfilesRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfilesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserProfilesResponse

@implementation UserProfilesResponse

@dynamic usersArray, usersArray_Count;

typedef struct UserProfilesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} UserProfilesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = UserProfilesResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserProfilesResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfilesResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfilesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUnreadMessagesRequest

@implementation GetUnreadMessagesRequest


typedef struct GetUnreadMessagesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetUnreadMessagesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUnreadMessagesRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetUnreadMessagesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUnreadMessagesResponse

@implementation GetUnreadMessagesResponse

@dynamic messagesArray, messagesArray_Count;

typedef struct GetUnreadMessagesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} GetUnreadMessagesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = GetUnreadMessagesResponse_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUnreadMessagesResponse__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUnreadMessagesResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUnreadMessagesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNewMessagesRequest

@implementation GetNewMessagesRequest

@dynamic offsetMessageId;

typedef struct GetNewMessagesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *offsetMessageId;
} GetNewMessagesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offsetMessageId",
        .dataTypeSpecific.className = NULL,
        .number = GetNewMessagesRequest_FieldNumber_OffsetMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNewMessagesRequest__storage_, offsetMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNewMessagesRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNewMessagesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNewMessagesResponse

@implementation GetNewMessagesResponse

@dynamic messagesArray, messagesArray_Count;

typedef struct GetNewMessagesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} GetNewMessagesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = GetNewMessagesResponse_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetNewMessagesResponse__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNewMessagesResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNewMessagesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReadMessageRequest

@implementation ReadMessageRequest

@dynamic mid;

typedef struct ReadMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *mid;
} ReadMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = ReadMessageRequest_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReadMessageRequest__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReadMessageRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReadMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageRequest

@implementation SendMessageRequest

@dynamic type;
@dynamic to;
@dynamic data_p;
@dynamic mid;

typedef struct SendMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *to;
  NSString *data_p;
  NSString *mid;
} SendMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Mid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessagenResponse

@implementation SendMessagenResponse

@dynamic omid;
@dynamic nmid;

typedef struct SendMessagenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *omid;
  NSString *nmid;
} SendMessagenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "omid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessagenResponse_FieldNumber_Omid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessagenResponse__storage_, omid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nmid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessagenResponse_FieldNumber_Nmid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessagenResponse__storage_, nmid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessagenResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessagenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendUpdatesRequest

@implementation FriendUpdatesRequest

@dynamic friendSyncTag;

typedef struct FriendUpdatesRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t friendSyncTag;
} FriendUpdatesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendSyncTag",
        .dataTypeSpecific.className = NULL,
        .number = FriendUpdatesRequest_FieldNumber_FriendSyncTag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendUpdatesRequest__storage_, friendSyncTag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendUpdatesRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendUpdatesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendUpdatesResponse

@implementation FriendUpdatesResponse

@dynamic hasFriendOperations, friendOperations;

typedef struct FriendUpdatesResponse__storage_ {
  uint32_t _has_storage_[1];
  FriendOperations *friendOperations;
} FriendUpdatesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendOperations",
        .dataTypeSpecific.className = GPBStringifySymbol(FriendOperations),
        .number = FriendUpdatesResponse_FieldNumber_FriendOperations,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendUpdatesResponse__storage_, friendOperations),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendUpdatesResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendUpdatesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendRequestRequest

@implementation FriendRequestRequest

@dynamic uid;
@dynamic greeting;

typedef struct FriendRequestRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *greeting;
} FriendRequestRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = FriendRequestRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendRequestRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = FriendRequestRequest_FieldNumber_Greeting,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FriendRequestRequest__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendRequestRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendRequestRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendRequestListRequest

@implementation FriendRequestListRequest

@dynamic limit;
@dynamic offset;

typedef struct FriendRequestListRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t limit;
  NSString *offset;
} FriendRequestListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = FriendRequestListRequest_FieldNumber_Limit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendRequestListRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = FriendRequestListRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FriendRequestListRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendRequestListRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendRequestListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendRequestListResponse

@implementation FriendRequestListResponse

@dynamic requestListArray, requestListArray_Count;

typedef struct FriendRequestListResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *requestListArray;
} FriendRequestListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NewFriendRequest),
        .number = FriendRequestListResponse_FieldNumber_RequestListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FriendRequestListResponse__storage_, requestListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendRequestListResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendRequestListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000requestList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendAgreeRequest

@implementation FriendAgreeRequest

@dynamic uid;

typedef struct FriendAgreeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} FriendAgreeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = FriendAgreeRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendAgreeRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendAgreeRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendAgreeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendAgreeResponse

@implementation FriendAgreeResponse

@dynamic friendSyncTag;

typedef struct FriendAgreeResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t friendSyncTag;
} FriendAgreeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendSyncTag",
        .dataTypeSpecific.className = NULL,
        .number = FriendAgreeResponse_FieldNumber_FriendSyncTag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendAgreeResponse__storage_, friendSyncTag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendAgreeResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendAgreeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendIgnoreRequest

@implementation FriendIgnoreRequest

@dynamic uid;

typedef struct FriendIgnoreRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} FriendIgnoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = FriendIgnoreRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendIgnoreRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendIgnoreRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendIgnoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendDeleteRequest

@implementation FriendDeleteRequest

@dynamic uid;

typedef struct FriendDeleteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} FriendDeleteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = FriendDeleteRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendDeleteRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendDeleteRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendDeleteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendDeleteResponse

@implementation FriendDeleteResponse

@dynamic friendSyncTag;

typedef struct FriendDeleteResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t friendSyncTag;
} FriendDeleteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendSyncTag",
        .dataTypeSpecific.className = NULL,
        .number = FriendDeleteResponse_FieldNumber_FriendSyncTag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendDeleteResponse__storage_, friendSyncTag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendDeleteResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendDeleteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendSearchRequest

@implementation FriendSearchRequest

@dynamic keyword;

typedef struct FriendSearchRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
} FriendSearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = FriendSearchRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendSearchRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendSearchRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendSearchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendSearchResponse

@implementation FriendSearchResponse

@dynamic usersArray, usersArray_Count;

typedef struct FriendSearchResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} FriendSearchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserData),
        .number = FriendSearchResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FriendSearchResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendSearchResponse class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendSearchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendRemarkRequest

@implementation FriendRemarkRequest

@dynamic uid;
@dynamic remark;

typedef struct FriendRemarkRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *remark;
} FriendRemarkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = FriendRemarkRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendRemarkRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = FriendRemarkRequest_FieldNumber_Remark,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FriendRemarkRequest__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendRemarkRequest class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendRemarkRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
